// #uchsoftware
#include <VirtualWire.h>
#include <ServoTimer2.h>

const int led_pin = 13;
const int receive_pin = 4;
const int servo_pin = 11;

// Gelen mesajları saklama alanı oluştur.
byte message[VW_MAX_MESSAGE_LEN]; 
 // Mesaj boyutu.
byte messageLength = VW_MAX_MESSAGE_LEN;
// Mesajdan gelen veriyi alacak değer tanımlanmıştır.
int decodedVal;
// Sensorden Servo’ya gelecek değer.
int mappedVal;

ServoTimer2 servo1;

void setup()
{
    pinMode(led_pin, OUTPUT);
    vw_set_rx_pin(receive_pin); // Alıcıyı başlatıyoruz.
    vw_setup(2000);   // Saniyedeki bit sayısı.    
}


void loop()
{
  readMessage();
  operateServo();
}

void readMessage() {
  vw_rx_start();
  tryGetMessage(10);
  vw_rx_stop(); 
}

void tryGetMessage(int times) {
  bool gotMessage = false;
  int i = 0;
  while(i++ < times && !gotMessage) {
    if (vw_get_message(message, &messageLength)) { 
      if (message[2] == 0) {
        gotMessage = true;
        //Alınan mesaj için Led’i yak.
        digitalWrite(led_pin, HIGH); 
        decode(message,  decodedVal);
        // Sensor değerini Servo Motora aktar.
        mappedVal = map(decodedVal, 0, 1023, MAX_PULSE_WIDTH, MIN_PULSE_WIDTH);
        digitalWrite(led_pin, LOW);
      }
    }
    delay(10); 
  }
}

// 2 byte’lık diziyi tekrar dönüştür.
void decode(byte * encoded, int & decoded ) {
  decoded = (short)(((encoded[1]) & 0xFF) << 8 | (encoded[0]) & 0xFF);
}

void operateServo() {
  servo1.attach(servo_pin);
  servo1.write(mappedVal);
  delay(20);
  servo1.detach();
  delay(20);
}
